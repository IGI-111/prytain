/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum TerrainInput { Sea = 'Sea', Coast = 'Coast', Port = 'Port', Ground = 'Ground' };
export enum TerrainOutput { Sea = 'Sea', Coast = 'Coast', Port = 'Port', Ground = 'Ground' };

export type TileInput = { terrain: TerrainInput, altitude: BigNumberish };
export type TileOutput = { terrain: TerrainOutput, altitude: number };

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "(_, _)",
      "components": [
        {
          "name": "__tuple_element",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "__tuple_element",
          "type": 8,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "enum Terrain",
      "components": [
        {
          "name": "Sea",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Coast",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Port",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Ground",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "struct RawVec",
      "components": [
        {
          "name": "ptr",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "typeId": 6,
      "type": "struct Tile",
      "components": [
        {
          "name": "terrain",
          "type": 2,
          "typeArguments": null
        },
        {
          "name": "altitude",
          "type": 10,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct std::vec::Vec",
      "components": [
        {
          "name": "buf",
          "type": 5,
          "typeArguments": [
            {
              "name": "",
              "type": 3,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "typeId": 8,
      "type": "u32",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "u64",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "x",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "y",
          "type": 8,
          "typeArguments": null
        }
      ],
      "name": "get_tile",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": null
      },
      "attributes": null
    },
    {
      "inputs": [
        {
          "name": "coords",
          "type": 7,
          "typeArguments": [
            {
              "name": "",
              "type": 1,
              "typeArguments": null
            }
          ]
        }
      ],
      "name": "get_tile_batch",
      "output": {
        "name": "",
        "type": 7,
        "typeArguments": [
          {
            "name": "",
            "type": 6,
            "typeArguments": null
          }
        ]
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class PrytainInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    get_tile: FunctionFragment;
    get_tile_batch: FunctionFragment;
  };
}

export class Prytain extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: PrytainInterface;
  declare functions: {
    get_tile: InvokeFunction<[x: BigNumberish, y: BigNumberish], TileOutput>;
    get_tile_batch: InvokeFunction<[coords: Vec<[BigNumberish, BigNumberish]>], Vec<TileOutput>>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
